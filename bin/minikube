#!/bin/sh

# start minikube
minikube start --cpus 4 --memory 10G --profile robotjoosen-minikube

# add ingress add-ons
minikube addons enable ingress
minikube addons enable ingress-dns

# wait for deployments to stabilize
kubectl wait --for=condition=available --timeout=120s --namespace kube-system --all deployments
kubectl wait --for=condition=available --timeout=120s --namespace ingress-nginx --all deployments
kubectl wait --for=condition=ready pod --timeout=120s --namespace ingress-nginx --selector=app.kubernetes.io/component=controller

CONTEXT=$(kubectl config current-context)
if [ "$CONTEXT" != "robotjoosen-minikube" ]; then
  echo "The current context [$CONTEXT] does not match [robotjoosen-minikube]"

  exit 1;
fi

# bootstrap
sh bin/bootstrap/sealed-secrets
sh bin/bootstrap/argocd
sh bin/bootstrap/local-environment

# get passwords and expose them to the client
cat <<EOF

ArgoCD Dashboard
url      : https://argocd.svc.localhost
user     : admin
password : $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

Grafana Dashboard
url      : https://grafana.monitoring.localhost
user     : admin
password : $(kubectl get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo)

EOF

# start network route from host to services
sudo minikube tunnel --profile robotjoosen-minikube
